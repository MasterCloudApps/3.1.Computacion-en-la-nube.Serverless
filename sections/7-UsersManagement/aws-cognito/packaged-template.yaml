AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cognito Users Pool Authentication + API with protected routes
Globals:
  Api:
    Cors:
      AllowMethods: '''GET,POST,OPTIONS,PUT,DELETE'''
      AllowHeaders: '''content-type'''
      AllowOrigin: '''*'''
      AllowCredentials: '''*'''
Parameters:
  CognitoUserPoolName:
    Type: String
    Default: UsersManagementUserPool
  CognitoUserPoolClientName:
    Type: String
    Default: UsersManagementPoolClient
  UserpoolDomainPrefix:
    Type: String
    Default: franrobles8-users-management-1
Resources:
  UsersManagementApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors: '''*'''
      Auth:
        DefaultAuthorizer: UsersManagementAuthorizer
        Authorizers:
          UsersManagementAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - UsersManagementUserPool
              - Arn
  UsersManagementLambdaAuthentication:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://users-management-bucket/302c513ffb2c4ad247b29e7410bed89d
      Handler: index.authHandler
      Runtime: nodejs10.x
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID:
            Ref: UsersManagementCognitoUserPoolClient
          COGNITO_USER_POOL_ID:
            Ref: UsersManagementUserPool
          COGNITO_DEFAULT_USER_GROUP_NAME:
            Ref: UserPoolGroupUsers
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cognito-idp:AdminAddUserToGroup
          - cognito-idp:AdminRemoveUserFromGroup
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - :userpool/*
      Events:
        CreateUser:
          Type: Api
          Properties:
            RestApiId:
              Ref: UsersManagementApi
            Path: /auth/register
            Method: POST
            Auth:
              Authorizer: NONE
        LoginUser:
          Type: Api
          Properties:
            RestApiId:
              Ref: UsersManagementApi
            Path: /auth/login
            Method: POST
            Auth:
              Authorizer: NONE
        RefreshToken:
          Type: Api
          Properties:
            RestApiId:
              Ref: UsersManagementApi
            Path: /auth/refresh-token
            Method: POST
            Auth:
              Authorizer: NONE
  UsersManagementLambdaUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://users-management-bucket/302c513ffb2c4ad247b29e7410bed89d
      Handler: user.userHandler
      Runtime: nodejs10.x
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID:
            Ref: UsersManagementCognitoUserPoolClient
          COGNITO_USER_POOL_ID:
            Ref: UsersManagementUserPool
          COGNITO_DEFAULT_USER_GROUP_NAME:
            Ref: UserPoolGroupUsers
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cognito-idp:listUsers
          - cognito-idp:AdminEnableUser
          - cognito-idp:AdminDisableUser
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - :userpool/*
      Events:
        GetAllUsers:
          Type: Api
          Properties:
            RestApiId:
              Ref: UsersManagementApi
            Path: /user
            Method: GET
        GetUserInfo:
          Type: Api
          Properties:
            RestApiId:
              Ref: UsersManagementApi
            Path: /user/info
            Method: POST
        ConfirmUserFromAdmin:
          Type: Api
          Properties:
            RestApiId:
              Ref: UsersManagementApi
            Path: /user/activate-user-from-admin
            Method: PUT
  UsersManagementLambdaAuthenticationOptions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://users-management-bucket/302c513ffb2c4ad247b29e7410bed89d
      Handler: index.optionsHandler
      Runtime: nodejs10.x
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID:
            Ref: UsersManagementCognitoUserPoolClient
          COGNITO_USER_POOL_ID:
            Ref: UsersManagementUserPool
          COGNITO_DEFAULT_USER_GROUP_NAME:
            Ref: UserPoolGroupUsers
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cognito-idp:AdminAddUserToGroup
          - cognito-idp:AdminRemoveUserFromGroup
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:cognito-idp:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - :userpool/*
      Events:
        CreateUserOptions:
          Type: Api
          Properties:
            RestApiId:
              Ref: UsersManagementApi
            Path: /auth/register
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        LoginUserOptions:
          Type: Api
          Properties:
            RestApiId:
              Ref: UsersManagementApi
            Path: /auth/login
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        RefreshTokenOptions:
          Type: Api
          Properties:
            RestApiId:
              Ref: UsersManagementApi
            Path: /auth/refresh-token
            Method: OPTIONS
            Auth:
              Authorizer: NONE
  UsersManagementLambdaUserOptions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://users-management-bucket/302c513ffb2c4ad247b29e7410bed89d
      Handler: user.optionsHandler
      Runtime: nodejs10.x
      Environment:
        Variables:
          COGNITO_USER_POOL_CLIENT_ID:
            Ref: UsersManagementCognitoUserPoolClient
          COGNITO_USER_POOL_ID:
            Ref: UsersManagementUserPool
          COGNITO_DEFAULT_USER_GROUP_NAME:
            Ref: UserPoolGroupUsers
      Events:
        GetAllUsers:
          Type: Api
          Properties:
            RestApiId:
              Ref: UsersManagementApi
            Path: /user
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        GetUserInfoOptions:
          Type: Api
          Properties:
            RestApiId:
              Ref: UsersManagementApi
            Path: /user/info
            Method: OPTIONS
            Auth:
              Authorizer: NONE
        ConfirmUserFromAdminOptions:
          Type: Api
          Properties:
            RestApiId:
              Ref: UsersManagementApi
            Path: /user/activate-user-from-admin
            Method: OPTIONS
            Auth:
              Authorizer: NONE
  UsersManagementUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Ref: CognitoUserPoolName
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
        EmailSubject: Activation link
        EmailSubjectByLink: Click on the link to activate your account
      Policies:
        PasswordPolicy:
          TemporaryPasswordValidityDays: 1
          MinimumLength: 6
          RequireNumbers: true
      UsernameAttributes:
      - email
      AutoVerifiedAttributes:
      - email
      Schema:
      - AttributeDataType: String
        Name: email
        Required: true
      - AttributeDataType: String
        Name: firstname
        Required: false
      - AttributeDataType: String
        Name: lastname
        Required: false
  UsersManagementCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: UsersManagementUserPool
      ClientName:
        Ref: CognitoUserPoolClientName
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 20
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Fn::Sub: ${UserpoolDomainPrefix}
      UserPoolId:
        Ref: UsersManagementUserPool
  UserPoolGroupUsers:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Group for basic roles
      GroupName: Users
      UserPoolId:
        Ref: UsersManagementUserPool
  UserPoolGroupAdmins:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Group for admin roles
      GroupName: Admins
      UserPoolId:
        Ref: UsersManagementUserPool
Outputs:
  Region:
    Description: Region
    Value:
      Ref: AWS::Region
  ApiUrl:
    Description: API Endpoint for dev environment
    Value:
      Fn::Sub: https://${UsersManagementApi}.execute-api.${AWS::Region}.amazonaws.com/dev/
