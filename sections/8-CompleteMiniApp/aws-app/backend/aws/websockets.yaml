Transform: 'AWS::Serverless-2016-10-31'
Globals:
  Api:
    # Allows an application running locally on port 3000 to call this API
    Cors:
      AllowMethods: "'OPTIONS,POST,GET,PUT'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin: "'http://localhost:3000'"

Parameters:
  websocketsTableName:
    Type: String
    Description: Name of tables where the websockets connection ids will be managed
  webSocketApiName:
    Type: String
    Description: Name of the websocket API

Resources:
  # Function to add a connection to the db
  ConnectLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
        Runtime: nodejs10.x
        Handler: websockets.handlerConnect
        CodeUri: ../src/
        Policies:
          - DynamoDBCrudPolicy:
              TableName:
                !Ref WebsocketsTable
        Environment:
          Variables:
            TABLE_NAME: !Ref WebsocketsTable

  # Function to delete a connection to the db
  DisconnectLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
        Runtime: nodejs10.x
        Handler: websockets.handlerDisconnect
        CodeUri: ../src/
        Policies:
          - DynamoDBCrudPolicy:
              TableName:
                !Ref WebsocketsTable
        Environment:
          Variables:
            TABLE_NAME: !Ref WebsocketsTable

  # Function to delete a connection to the db
  OnMessageLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
        Runtime: nodejs10.x
        Handler: websockets.handlerOnMessage
        CodeUri: ../src/
        Policies:
          - DynamoDBCrudPolicy:
              TableName:
                !Ref WebsocketsTable
          - Statement:
            - Effect: Allow
              Action:
              - 'execute-api:ManageConnections'
              Resource:
              - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'
        Environment:
          Variables:
            TABLE_NAME: !Ref WebsocketsTable

  
  # Creates a dynamodb table to save the connection ids
  WebsocketsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
        TableName: !Ref websocketsTableName
        AttributeDefinitions:
            -   AttributeName: connectionid
                AttributeType: S
        KeySchema:
            -   AttributeName: connectionid
                KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
  
  # Creates an api resource to use websockets
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref webSocketApiName
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  # Route to connect the $connect
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectIntegration

  # Route to connect the $disconnect
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectIntegration

  # Route to connect the onMessage key to a lambda
  OnMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: "onMessage"
      AuthorizationType: NONE
      OperationName: OnMessageRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref OnMessageIntegration

  # Integration of the Route to $connect
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectLambdaFunction.Arn}/invocations

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectLambdaFunction.Arn}/invocations

  # Integration of the Route to onMessage
  OnMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      Description: OnMessage integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnMessageLambdaFunction.Arn}/invocations

  # Permissions to invoke functions
  ConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
      - ConnectLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectLambdaFunction
      Principal: apigateway.amazonaws.com

  DisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
      - DisconnectLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DisconnectLambdaFunction
      Principal: apigateway.amazonaws.com

  OnMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
      - OnMessageLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnMessageLambdaFunction
      Principal: apigateway.amazonaws.com

  # Deployment of the websockets API
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - OnMessageRoute
    Properties:
      ApiId: !Ref WebSocketApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: dev
      Description: First version of the websockets api
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebSocketApi

  